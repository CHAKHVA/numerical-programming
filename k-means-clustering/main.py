import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# This data is generated by ChatGPT (model: GTP-4o)
data = pd.read_csv('../AP1/data.csv')

X = data[['Repos on GitHub (K)', 'Learning Difficulty (1-5)']].values

np.random.seed(1)
k = 3


def calculate_distance(a, b):
    return np.sqrt(np.sum((a - b) ** 2, axis=1))


def k_means(X, k, max_iter=100):
    m = X.shape[0]
    centroids = X[np.random.choice(m, k, replace=False)]
    labels = np.zeros(m)
    for iteration in range(max_iter):
        clusters = [[] for _ in range(k)]

        for i, x in enumerate(X):
            distances = calculate_distance(x, centroids)
            cluster_idx = np.argmin(distances)
            clusters[cluster_idx].append(x)
            labels[i] = cluster_idx

        new_centroids = np.array(
            [np.mean(cluster, axis=0) if cluster else centroids[i] for i, cluster in enumerate(clusters)])

        if np.all(centroids == new_centroids):
            break
        centroids = new_centroids

    return centroids, labels


def k_medoids(X, k, max_iter=100):
    m = X.shape[0]
    medoids = X[np.random.choice(m, k, replace=False)]
    labels = np.zeros(m)

    for iteration in range(max_iter):
        clusters = [[] for _ in range(k)]
        for i, x in enumerate(X):
            distances = calculate_distance(x, medoids)
            cluster_idx = np.argmin(distances)
            clusters[cluster_idx].append(i)
            labels[i] = cluster_idx

        new_medoids = np.copy(medoids)

        for cluster_idx, cluster in enumerate(clusters):
            if len(cluster) > 0:
                intra_cluster_distances = np.zeros(len(cluster))
                for i, point_idx in enumerate(cluster):
                    intra_cluster_distances[i] = np.sum(calculate_distance(X[point_idx], X[cluster]))

                min_idx = np.argmin(intra_cluster_distances)
                new_medoids[cluster_idx] = X[cluster[min_idx]]

        if np.all(medoids == new_medoids):
            break

        medoids = new_medoids

    return medoids, labels


centroids, labels_kmeans = k_means(X, k)

medoids, labels_medoids = k_medoids(X, k)


fig, ax = plt.subplots(1, 2, figsize=(16, 6))

# K-means Plot
colors = ['r', 'g', 'b']
ax[0].set_title('K-means Clustering')
for i in range(k):
    cluster_points = X[labels_kmeans == i]
    ax[0].scatter(cluster_points[:, 0], cluster_points[:, 1], s=50, color=colors[i])

ax[0].scatter(centroids[:, 0], centroids[:, 1], s=100, c='black', marker='X', label='Centroids')
ax[0].set_xlabel('Repos on GitHub (K)')
ax[0].set_ylabel('Learning Difficulty (1-5)')
ax[0].legend()

# K-medoids Plot
ax[1].set_title('K-medoids Clustering')
for i in range(k):
    cluster_points = X[labels_medoids == i]
    ax[1].scatter(cluster_points[:, 0], cluster_points[:, 1], s=50, color=colors[i])

ax[1].scatter(medoids[:, 0], medoids[:, 1], s=100, c='black', marker='X', label='Medoids')
ax[1].set_xlabel('Repos on GitHub (K)')
ax[1].set_ylabel('Learning Difficulty (1-5)')
ax[1].legend()

plt.tight_layout()
plt.show()
